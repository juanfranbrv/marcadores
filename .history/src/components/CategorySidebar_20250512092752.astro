---
import { Hash } from 'lucide-react';
import { fetchCollections, fetchTags } from '../lib/api';

const collections = await fetchCollections();
const tags = await fetchTags();

const categories = [
  { id: "todas", name: "Todas", icon: null },  // Usaremos Hash component para este
  ...collections.map(col => ({ 
    id: col.title.toLowerCase(), 
    name: col.title, 
    icon: col.icon  // Ahora es la URL del icono
  }))
];
---

<aside class="w-64 border-r bg-gray-50 p-4 hidden md:block">
  <div class="space-y-6">
    <div>
      <h3 class="text-xs font-semibold text-gray-500 uppercase tracking-wider mb-3">COLECCIONES</h3>
      <div class="space-y-1">
        {categories.map((category) => (
          <a
            href={category.id === "todas" ? "/" : `/category/${category.id}`}
            class:list={[
              "flex items-center gap-2 w-full px-3 py-2 text-sm font-medium rounded-md",
              (Astro.url.pathname === `/category/${category.id}` || (category.id === "todas" && Astro.url.pathname === "/"))
                ? "bg-indigo-600 text-white"
                : "text-gray-700 hover:bg-gray-200"
            ]}
          >
            {category.icon ? (
              <img src={category.icon} class="h-4 w-4 object-cover" alt={`Icono de ${category.name}`} />
            ) : category.id === "todas" ? (
              <span class="inline-block w-3 h-3 rounded-full bg-black"></span>
            ) : (
              <Hash class="h-4 w-4" />
            )}
            {category.name}
          </a>
        ))}
      </div>
    </div>

    <div>
      <h3 class="text-xs font-semibold text-gray-500 uppercase tracking-wider mb-3">#TAGS</h3>
      <div class="space-y-1">
        <a
          href="/tag/todas"
          class:list={[
            "flex items-center gap-1 w-full px-3 py-2 text-sm font-medium rounded-md",
            Astro.url.pathname === '/tag/todas'
              ? "bg-white border shadow-sm"
              : "text-gray-700 hover:bg-gray-200"
          ]}
        >
          <span class="inline-block w-3 h-3 text-gray-400 flex items-center justify-center">
            <svg width="12" height="12" viewBox="0 0 12 12" fill="none" xmlns="http://www.w3.org/2000/svg">
              <line x1="2" y1="2" x2="10" y2="10" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
              <line x1="10" y1="2" x2="2" y2="10" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
            </svg>
          </span>
          Todas
        </a>
        {tags.filter(tag => tag.name.toLowerCase() !== 'todas').map((tag) => (
          <a
            href={`/tag/${tag.name.toLowerCase()}`}
            class:list={[
              "flex items-center gap-1 w-full px-3 py-2 text-sm font-medium rounded-md",
              Astro.url.pathname === `/tag/${tag.name.toLowerCase()}`
                ? "bg-white border shadow-sm"
                : "text-gray-700 hover:bg-gray-200"
            ]}
          >
            <span class="text-gray-400">#</span>
            {tag.name}
          </a>
        ))}
      </div>
    </div>
  </div>
</aside>

<script>
  // Client-side interactivity for mobile sidebar toggle
  document.addEventListener('DOMContentLoaded', () => {
    const mobileMenuButton = document.getElementById('mobile-menu-button');
    const sidebar = document.querySelector('aside');
    
    if (mobileMenuButton && sidebar) {
      mobileMenuButton.addEventListener('click', () => {
        sidebar.classList.toggle('hidden');
      });
    }
  });
</script>
