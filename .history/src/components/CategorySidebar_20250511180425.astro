---
import { useState, useEffect } from 'react';

const [collections, setCollections] = useState([]);
const [tags, setTags] = useState([]);
const [accessToken, setAccessToken] = useState('');
const [loading, setLoading] = useState(false);
const [error, setError] = useState('');

useEffect(() => {
  if (!accessToken) return;
  setLoading(true);
  setError('');
  fetch('/api/raindrop/collections', {
    headers: { Authorization: `Bearer ${accessToken}` },
  })
    .then(res => res.json())
    .then(data => setCollections([{ _id: 0, title: 'Todas' }, ...(data || [])]))
    .catch(() => setCollections([{ _id: 0, title: 'Todas' }]))
    .finally(() => setLoading(false));
  fetch('/api/raindrop/tags', {
    headers: { Authorization: `Bearer ${accessToken}` },
  })
    .then(res => res.json())
    .then(data => setTags(['Todas', ...(data || [])]))
    .catch(() => setTags(['Todas']));
}, [accessToken]);
---

{!accessToken ? (
  <div class="max-w-md mx-auto mt-10 p-6 bg-white border rounded shadow">
    <h2 class="text-lg font-bold mb-2">Introduce tu Access Token de Raindrop.io</h2>
    <input
      type="text"
      class="w-full border px-3 py-2 rounded mb-2"
      placeholder="Access Token"
      value={accessToken}
      onInput={e => setAccessToken(e.target.value)}
    />
    <p class="text-xs text-gray-500 mb-2">Puedes obtenerlo tras autenticarte con OAuth2 o desde la web de Raindrop.io.</p>
  </div>
) : loading ? (
  <div class="text-center py-10">Cargando categor√≠as y etiquetas...</div>
) : error ? (
  <div class="text-red-500 text-center mt-10">{error}</div>
) : (
  <aside class="w-64 border-r bg-gray-50 p-4 hidden md:block">
    <div class="space-y-6">
      <div>
        <h3 class="text-xs font-semibold text-gray-500 uppercase tracking-wider mb-3">PRODUCT CATEGORIES</h3>
        <div class="space-y-1">
          {collections.map((col) => (
            <a
              href={col._id === 0 ? '/' : `/category/${col._id}`}
              class:list={[
                "flex items-center gap-2 w-full px-3 py-2 text-sm font-medium rounded-md",
                Astro.url.pathname === `/category/${col._id}` || (col._id === 0 && Astro.url.pathname === "/")
                  ? "bg-indigo-600 text-white"
                  : "text-gray-700 hover:bg-gray-200"
              ]}
            >
              <span class="text-gray-400">#</span>
              {col.title}
            </a>
          ))}
        </div>
      </div>
      <div>
        <h3 class="text-xs font-semibold text-gray-500 uppercase tracking-wider mb-3">#TAGS</h3>
        <div class="space-y-1">
          {tags.map((tag) => (
            <a
              href={tag === 'Todas' ? (Astro.url.pathname.startsWith('/category/') ? `/category/${Astro.params.category}` : '/') : (Astro.url.pathname.startsWith('/category/') ? `/category/${Astro.params.category}/tag/${tag}` : `/tag/${tag}`)}
              class:list={[
                "flex items-center gap-1 w-full px-3 py-2 text-sm font-medium rounded-md",
                (Astro.url.pathname === `/tag/${tag}` || Astro.url.pathname === `/category/${Astro.params.category}/tag/${tag}` || (tag === 'Todas' && (Astro.url.pathname === '/' || (/\/category\/[^/]+$/.test(Astro.url.pathname) && !/\/tag\//.test(Astro.url.pathname)))))
                  ? "bg-white border shadow-sm"
                  : "text-gray-700 hover:bg-gray-200"
              ]}
            >
              <span class="text-gray-400">#</span>
              {tag}
            </a>
          ))}
        </div>
      </div>
    </div>
  </aside>
)}

<script>
  // Client-side interactivity for mobile sidebar toggle
  document.addEventListener('DOMContentLoaded', () => {
    const mobileMenuButton = document.getElementById('mobile-menu-button');
    const sidebar = document.querySelector('aside');
    
    if (mobileMenuButton && sidebar) {
      mobileMenuButton.addEventListener('click', () => {
        sidebar.classList.toggle('hidden');
      });
    }
  });
</script>
