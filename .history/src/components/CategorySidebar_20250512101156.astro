---
import { Hash } from 'lucide-react';
import { fetchCollections, fetchTags } from '../lib/api';

const collections = await fetchCollections();
const tags = await fetchTags();

const categories = [
  { id: "todas", name: "Todas", icon: null },  // Usaremos Hash component para este
  ...collections.map(col => ({ 
    id: col.title.toLowerCase(), 
    name: col.title, 
    icon: col.icon  // Ahora es la URL del icono
  }))
];
---

<aside class="w-64 border-r bg-gray-50 p-4 hidden md:block">
  <div class="space-y-6">
    <div>
      <h3 class="text-xs font-semibold text-gray-500 uppercase tracking-wider mb-3">COLECCIONES</h3>
      <div class="space-y-1">
        {categories.map((category) => (
          <a
            href={category.id === "todas" ? "/" : `/category/${category.id}`}
            class:list={[
              "flex items-center gap-2 w-full px-3 py-2 text-sm font-medium rounded-md",
              (Astro.url.pathname === `/category/${category.id}` || (category.id === "todas" && Astro.url.pathname === "/"))
                ? "bg-indigo-600 text-white"
                : "text-gray-700 hover:bg-gray-200"
            ]}
          >
            {category.icon ? (
              <img src={category.icon} class="h-4 w-4 object-cover" alt={`Icono de ${category.name}`} />
            ) : category.id === "todas" ? (
              <span class="inline-block w-3 h-3 rounded-full bg-black"></span>
            ) : (
              <Hash class="h-4 w-4" />
            )}
            {category.name}
          </a>
        ))}
      </div>
    </div>

    <div>
      <h3 class="text-xs font-semibold text-gray-500 uppercase tracking-wider mb-3">#TAGS</h3>
      <div class="space-y-1">
        <a
          href={Astro.url.pathname.startsWith('/category/') && Astro.params.category
            ? `/category/${Astro.params.category}`
            : '/'}
          class:list={[
            "flex items-center gap-1 w-full px-3 py-2 text-sm font-medium rounded-md",
            (Astro.url.pathname === '/tag/todas' ||
              (Astro.url.pathname.startsWith('/category/') && !/\/tag\//.test(Astro.url.pathname)))
              ? "bg-white border shadow-sm"
              : "text-gray-700 hover:bg-gray-200"
          ]}
        >
          <span class="inline-block w-3 h-3 text-gray-400 flex items-center justify-center">
            <svg width="12" height="12" viewBox="0 0 12 12" fill="none" xmlns="http://www.w3.org/2000/svg">
              <line x1="2" y1="2" x2="10" y2="10" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
              <line x1="10" y1="2" x2="2" y2="10" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
            </svg>
          </span>
          Todas
        </a>
        {tags.filter(tag => tag.name.toLowerCase() !== 'todas').map((tag) => (
          <a
            href={Astro.url.pathname.startsWith('/category/')
              ? `/category/${Astro.params.category}/tag/${tag.name.toLowerCase()}`
              : `/tag/${tag.name.toLowerCase()}`}
            class:list={[
              "flex items-center gap-1 w-full px-3 py-2 text-sm font-medium rounded-md",
              (Astro.url.pathname === `/tag/${tag.name.toLowerCase()}` ||
                Astro.url.pathname === `/category/${Astro.params.category}/tag/${tag.name.toLowerCase()}`)
                ? "bg-white border shadow-sm"
                : "text-gray-700 hover:bg-gray-200"
            ]}
          >
            <span class="text-gray-400">#</span>
            {tag.name}
          </a>
        ))}
      </div>
    </div>
  </div>
</aside>

<script>
  // Client-side interactivity for mobile sidebar toggle
  document.addEventListener('DOMContentLoaded', () => {
    const mobileMenuButton = document.getElementById('mobile-menu-button');
    const sidebar = document.querySelector('aside');
    
    if (mobileMenuButton && sidebar) {
      mobileMenuButton.addEventListener('click', () => {
        sidebar.classList.toggle('hidden');
      });
    }
  });
</script>

---
// Supongamos que tienes una lista de categorías o una forma de definir "Todas"
const categories = [
  { name: "Todas", href: "/", icon: "ICONO_ANTIGUO_AQUI" },
  ...
];

// O quizás tienes un enlace estático para "Todas"
---
<aside class="w-64 bg-gray-50 p-6 border-r border-gray-200">
  <nav>
    <ul class="space-y-2">
      <!-- Ejemplo de cómo podría estar el ítem "Todas" -->
      <li>
        <a href="/" class="flex items-center gap-3 text-gray-700 hover:bg-gray-200 p-2 rounded">
          <!-- REEMPLAZA EL SVG AQUÍ -->
          <svg viewBox="0 0 24 24" width="20" height="20" stroke="currentColor" stroke-width="2" fill="none" stroke-linecap="round" stroke-linejoin="round">
            <path d="M3.75 6A2.25 2.25 0 016 3.75h2.25A2.25 2.25 0 0110.5 6v2.25a2.25 2.25 0 01-2.25 2.25H6a2.25 2.25 0 01-2.25-2.25V6zM3.75 15.75A2.25 2.25 0 016 13.5h2.25a2.25 2.25 0 012.25 2.25V18a2.25 2.25 0 01-2.25 2.25H6A2.25 2.25 0 013.75 18v-2.25zM13.5 6a2.25 2.25 0 012.25-2.25H18A2.25 2.25 0 0120.25 6v2.25A2.25 2.25 0 0118 10.5h-2.25a2.25 2.25 0 01-2.25-2.25V6zM13.5 15.75a2.25 2.25 0 012.25-2.25H18a2.25 2.25 0 012.25 2.25V18a2.25 2.25 0 01-2.25 2.25h-2.25a2.25 2.25 0 01-2.25-2.25v-2.25z" />
          </svg>
          <span>Todas</span>
        </a>
      </li>

      <!-- Renderizado de otras categorías (esto es solo un ejemplo) -->
      {categories.filter(cat => cat.name !== "Todas").map(category => (
        <li>
          <a href={category.href} class="flex items-center gap-3 text-gray-700 hover:bg-gray-200 p-2 rounded">
            {/* Asumiendo que aquí renderizas otros SVGs para otras categorías */}
            <span>{category.name}</span>
          </a>
        </li>
      ))}
    </ul>
  </nav>
</aside>
---
